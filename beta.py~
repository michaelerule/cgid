'''
Routines related to extracting and processing beta
'''

#def compare_high_low_beta_amplitude_spikes_ppc_5050(session,area,unit,epoch):

from matplotlib.pyplot import *
from numpy import *
from neurotools.plot import *
 
from cgid.data_loader import get_good_trials,get_good_channels
from cgid.lfp import get_filtered_lfp
from cgid.setup import areas

import numpy as np
from cgid.lfp                import get_raw_lfp_session, get_filtered_lfp
from cgid.spikes             import get_spikes_session_filtered_by_epoch,get_unit_channel
from cgid.data_loader        import get_trial_event, good_trials
from neurotools.signal       import bandfilter, get_edges
from neurotools.tools        import wait
from numpy.core.numeric      import convolve
from numpy.lib.function_base import diff
from matplotlib.pyplot       import clf,axvspan,plot,ylim,axhline,draw
from neurotools.tools        import memoize

from scipy.signal.signaltools import *
from numpy import *


@memoize
def get_beta_peak(session,area,epoch,fa,fb):
    # determine beta peak
    Fs=1000
    allspec=[]
    for trial in good_trials(session):
        x = get_all_raw_lfp(session, area, trial, epoch)
        f,mts = multitaper_spectrum(x,5,Fs)
        allspec.append(mts)
    allspec     = arr(allspec)
    Ntr,Nch,Nti = shape(allspec)
    meanspec    = mean(allspec,axis=(0,1))
    peaks,vals  = local_maxima(meanspec)
    betapeaks   = peaks[(f[peaks]>fa)&(f[peaks]<fb)]
    betapeak    = f[betapeaks][argmax(meanspec[betapeaks])]
    return betapeak


def estimate_beta_band(session,area,bw=8,epoch=None,doplot=False):
    '''
    return betapeak-0.5*bw,betapeak+0.5*bw
    '''
    print 'THIS IS NOT THE ONE YOU WANT TO USE'
    print 'IT IS EXPERIMENTAL COHERENCE BASED IDENTIFICATION OF BETA'
    assert 0
    if epoch is None: epoch = (6,-1000,3000)
    allco = []
    if not area is None:
        chs = get_good_channels(session,area)[:2]
        for a in chs:
            for b in chs:
                if a==b: continue
                for tr in get_good_trials(session):
                    x = get_filtered_lfp(session,area,a,tr,epoch,None,300)
                    y = get_filtered_lfp(session,area,b,tr,epoch,None,300)
                    co,fr = cohere(x,y,Fs=1000,NFFT=256)
                    allco.append(co)
    else:
        for area in areas:
            chs = get_good_channels(session,area)[:2]
            for a in chs:
                for b in chs:
                    if a==b: continue
                    for tr in get_good_trials(session):
                        x = get_filtered_lfp(session,area,a,tr,epoch,None,300)
                        y = get_filtered_lfp(session,area,b,tr,epoch,None,300)
                        co,fr = cohere(x,y,Fs=1000,NFFT=256)
                        allco.append(co)
    allco = array(allco)
    m = mean(allco,0)
    sem = std(allco,0)/sqrt(shape(allco)[0])
    # temporary in lieu of multitaper
    smooth = ceil(float(bw)/(diff(fr)[0]))
    smoothed = convolve(m,ones(smooth)/smooth,'same')
    use    = (fr<=56)&(fr>=5)
    betafr = (fr<=30-0.5*bw)&(fr>=15+0.5*bw)
    betapeak = fr[betafr][argmax(smoothed[betafr])]
    if doplot:
        clf()
        plot(fr[use],m[use],lw=2,color='k')
        plot(fr[use],smoothed[use],lw=1,color='r')
        plot(fr[use],(m+sem)[use],lw=1,color='k')
        plot(fr[use],(m-sem)[use],lw=1,color='k')
        positivey()
        xlim(*rangeover(fr[use]))
        shade([[betapeak-0.5*bw],[betapeak+0.5*bw]])
        draw()
    return betapeak-0.5*bw,betapeak+0.5*bw


def get_stored_beta_peak(session,area,epoch):
    if epoch not in epochs:
        print 'supporting onle the 1s pre-obj and pre go'
        print 'epoch',epoch,'not available'
        assert 0
    beta_peaks = {\
     ('RUS120518', 'M1' , (6, -1000, 0)): 16.0,
     ('RUS120518', 'M1' , (8, -1000, 0)): 19.0,
     ('RUS120518', 'PMd', (6, -1000, 0)): 18.0, # changed 26 to 18
     ('RUS120518', 'PMd', (8, -1000, 0)): 18.0,
     ('RUS120518', 'PMv', (6, -1000, 0)): 19.0,
     ('RUS120518', 'PMv', (8, -1000, 0)): 19.0,
     ('RUS120521', 'M1' , (6, -1000, 0)): 16.0,
     ('RUS120521', 'M1' , (8, -1000, 0)): 18.0,
     ('RUS120521', 'PMd', (6, -1000, 0)): 18.0, # changed 24 to 18
     ('RUS120521', 'PMd', (8, -1000, 0)): 18.0,
     ('RUS120521', 'PMv', (6, -1000, 0)): 18.0,
     ('RUS120521', 'PMv', (8, -1000, 0)): 18.0,
     ('RUS120523', 'M1' , (6, -1000, 0)): 16.0,
     ('RUS120523', 'M1' , (8, -1000, 0)): 18.0,
     ('RUS120523', 'PMd', (6, -1000, 0)): 18.0, # changed 23 to 18
     ('RUS120523', 'PMd', (8, -1000, 0)): 18.0,
     ('RUS120523', 'PMv', (6, -1000, 0)): 19.0,
     ('RUS120523', 'PMv', (8, -1000, 0)): 18.0,
     ('SPK120918', 'M1' , (6, -1000, 0)): 20.0,
     ('SPK120918', 'M1' , (8, -1000, 0)): 23.0,
     ('SPK120918', 'PMd', (6, -1000, 0)): 20.0,
     ('SPK120918', 'PMd', (8, -1000, 0)): 23.0,
     ('SPK120918', 'PMv', (6, -1000, 0)): 21.0,
     ('SPK120918', 'PMv', (8, -1000, 0)): 24.0,
     ('SPK120924', 'M1' , (6, -1000, 0)): 21.0,
     ('SPK120924', 'M1' , (8, -1000, 0)): 22.0,
     ('SPK120924', 'PMd', (6, -1000, 0)): 21.0,
     ('SPK120924', 'PMd', (8, -1000, 0)): 23.0,
     ('SPK120924', 'PMv', (6, -1000, 0)): 20.0,
     ('SPK120924', 'PMv', (8, -1000, 0)): 25.0,
     ('SPK120925', 'M1' , (6, -1000, 0)): 20.0,
     ('SPK120925', 'M1' , (8, -1000, 0)): 24.0,
     ('SPK120925', 'PMd', (6, -1000, 0)): 20.0,
     ('SPK120925', 'PMd', (8, -1000, 0)): 24.0,
     ('SPK120925', 'PMv', (6, -1000, 0)): 21.0,
     ('SPK120925', 'PMv', (8, -1000, 0)): 24.0
    }
    return beta_peaks[session,area,epoch]

def get_mean_beta_peak(session,epoch):
    return mean([get_stored_beta_peak(session,s,epoch) for a in areas])
